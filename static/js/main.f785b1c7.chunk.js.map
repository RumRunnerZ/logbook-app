{"version":3,"sources":["img/log4.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","console","log","worker","createWorker","logger","m","doOCR","a","load","loadLanguage","initialize","recognize","require","text","data","setOcr","useState","ocr","useEffect","className","src","alt","style","width","height","type","onClick","fromI","indexOf","fltno","substr","from","to","fltdate","reg","offblock","onblock","flightnumber","push","flightdate","doIt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,kC,qLCqB5B,SAASC,IACtBC,QAAQC,IAAI,SAGV,IAAMC,EAASC,uBAAa,CAC1BC,OAAQ,SAAAC,GAAC,OAAIL,QAAQC,IAAII,MAGrBC,EAAK,uCAAG,8BAAAC,EAAA,sEACNL,EAAOM,OADD,uBAENN,EAAOO,aAAa,OAFd,uBAGNP,EAAOQ,WAAW,OAHZ,uBAMqBR,EAAOS,UAAUC,EAAQ,KAN9C,gBAMIC,EANJ,EAMJC,KAAQD,KAEhBb,QAAQC,IAAIY,GACZE,EAAOF,GATK,4CAAH,qDARe,EAmBJG,mBAAS,kBAnBL,mBAmBnBC,EAnBmB,KAmBdF,EAnBc,KAoB1BG,qBAAU,WACRlB,QAAQC,IAAI,aACZK,OAqDF,OACE,yBAAKa,UAAU,OACb,wCACA,2BAAIF,GACJ,4BACA,yBAAKG,IAAKR,EAAQ,IAAmBS,IAAI,GAAGC,MAAO,CAACC,MAAO,IAAKC,OAAQ,OACxE,4BACA,4BAAQC,KAAK,SAASC,QAzDb,WACX,IAGIC,EAAQV,EAAIW,QAAQ,QACpBC,EAAQZ,EAAIa,OAAQH,EAAQ,EAAI,GAChCI,EAAOd,EAAIa,OAAQH,EAAQ,EAAI,GAC/BK,EAAKf,EAAIa,OAAQH,EAAQ,GAAK,GAC9BM,EAAUhB,EAAIa,OAAQb,EAAIW,QAAQ,QAAU,EAAI,GAChDM,EAAMjB,EAAIa,OAAQb,EAAIW,QAAQ,MAAQ,EAAI,GAC1CO,EAAWlB,EAAIa,OAAQb,EAAIW,QAAQ,YAAc,EAAI,GACrDQ,EAAUnB,EAAIa,OAAQb,EAAIW,QAAQ,SAAW,EAAI,GAV3C,CAAC,CACTS,aAAc,MAWZC,KAAK,CACPD,aAAcR,EACdE,KAAMA,EACNC,GAAIA,EACJO,WAAYN,EACZC,IAAKA,IAKPlC,QAAQC,IAAI,iBAAmB4B,GAC/B7B,QAAQC,IAAI,SAAW8B,GACvB/B,QAAQC,IAAI,OAAS+B,GACrBhC,QAAQC,IAAI,SAAWgC,GACvBjC,QAAQC,IAAI,QAAUiC,GACtBlC,QAAQC,IAAI,eAAiBkC,GAC7BnC,QAAQC,IAAI,cAAgBmC,GA4BKI,IAA/B,SACA,6BC5FYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACjD,EAAD,OAEFkD,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1D,QAAQ0D,MAAMA,EAAMC,c","file":"static/js/main.f785b1c7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/log4.0b01dbda.jpg\";","import React, { useEffect, useState } from 'react';\n//import ( Component ) from 'react''\nimport { createWorker } from 'tesseract.js';\n//import plaatje from './img/log.jpeg';\n\n//export default class App extends React.Component {\n\n\n/*\n  OPZET / PLAN:\n\n  - CAMERA VOOR SCAN VAN ACARS FLT LOG\n  - OCR\n  - ZOEK VOOR NODIGE INFO\n  - DATABASE, WAAR DE LOG IN GAAT\n  - BEVESTIGING / AANPASSING GEVRAAGD VOORDAT HET ERIN GESCHOTEN WORDT.\n\n\n*/\n\n\nexport default function App() {\n  console.log('start');\n  //  render() {\n\n    const worker = createWorker({\n      logger: m => console.log(m),\n    });\n\n    const doOCR = async () => {\n      await worker.load();\n      await worker.loadLanguage('eng');\n      await worker.initialize('eng');\n      //const { data: { text } } = await worker.recognize('https://tesseract.projectnaptha.com/img/eng_bw.png');\n      //const { data: { text } } = await worker.recognize('http://boomingwebdesign.nl/eng.png');\n      const { data: { text } } = await worker.recognize(require('./img/log4.jpg'));\n\n      console.log(text);\n      setOcr(text);\n    };\n    const [ocr, setOcr] = useState('Recognizing...');\n    useEffect(() => {\n      console.log('useEffect');\n      doOCR();\n    });\n\n    const doIt = () => {\n      var log = [{          //dit is log[0]\n        flightnumber: 'a',\n      }];\n      var fromI = ocr.indexOf('FROM');\n      var fltno = ocr.substr((fromI - 7), 7);\n      var from = ocr.substr((fromI + 8), 4);\n      var to = ocr.substr((fromI + 13), 4);\n      var fltdate = ocr.substr((ocr.indexOf('DATE') + 5), 7);\n      var reg = ocr.substr((ocr.indexOf('ID') + 4), 6);\n      var offblock = ocr.substr((ocr.indexOf('AIRBORNE') - 5), 4);\n      var onblock = ocr.substr((ocr.indexOf('TOUCH') - 5), 4);\n\n      log.push({        //dit is log[1]\n        flightnumber: fltno,\n        from: from,\n        to: to,\n        flightdate: fltdate,\n        reg: reg\n      });\n\n\n      //console.log('fromI: ' + fromI);\n      console.log('flightnumber: ' + fltno);\n      console.log('from: ' + from);\n      console.log('to: ' + to);\n      console.log('date: ' + fltdate);\n      console.log('reg: ' + reg);\n      console.log('Off blocks: ' + offblock);\n      console.log('on blocks: ' + onblock);\n\n\n\n      /*\n\n      console.log('log0:' + log[0]);\n      console.log('log0 reg:' + log[0].reg);\n      console.log('log1 reg:' + log[1].reg);\n      console.log('log reg:' + log.reg);\n      console.log('log0:' + log[0]);\n      console.log('log1:' + log[1]);\n      //console.log('log reg:' + log.reg); //undefined\n      console.log('log0 reg:' + log[0].reg);\n      */\n\n    }\n\n    // van {log[0].from} naar {log[0].to} op {log[0].date} reg: {log[0].reg} </p>\n    //<p>{log[0] !== undefined && log[0].flightnumber}</p>\n    //{require('./img/log.jpeg')}\n    return (\n      <div className=\"App\">\n        <h1>Hoi hoi!</h1>\n        <p>{ocr}</p>\n        <p/>\n        <img src={require('./img/log4.jpg')} alt='' style={{width: 500, height: 100}} />\n        <p/>\n        <button type=\"button\" onClick={doIt()}>DoIt!</button>\n        <p/>\n\n      </div>\n    )\n  //}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}